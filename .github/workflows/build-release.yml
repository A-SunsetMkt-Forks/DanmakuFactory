name: Build & Release

on:
  push:
    paths:
      - "**/*.c"
      - "**/*.h"
      - "**/CMakeLists.txt"
  workflow_dispatch:

concurrency:
  group: "build-release"
  cancel-in-progress: false

jobs:
  build:
    name: Build on ${{ matrix.platform }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: Linux
            arch: x64

          - os: ubuntu-24.04-arm
            platform: Linux
            arch: arm64

          - os: macos-13
            platform: macOS
            arch: Intel

          - os: macos-latest
            platform: macOS
            arch: arm64

          - os: windows-latest
            platform: Windows
            arch: x64

          - os: windows-11-arm
            platform: Windows
            arch: arm64

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v5
        with:
          submodules: "recursive"

      - name: Get Project Name
        shell: bash
        run: |
          PROJECT_NAME=$(node -e "
            const fs = require('fs');
            try {
              const content = fs.readFileSync('CMakeLists.txt', 'utf8');
              const match = content.match(/project\s*\(\s*([^ )]+)/);
              console.log(match ? match[1] : 'DanmakuFactory');
            } catch (err) {
              console.log('DanmakuFactory');
            }
          ")
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

      - name: Build Project
        uses: threeal/cmake-action@v2.1.0
        with:
          options: CMAKE_BUILD_TYPE=Release
          build-args: --config Release --target ${{ env.PROJECT_NAME }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            build/**/${{ env.PROJECT_NAME }}
            build/**/${{ env.PROJECT_NAME }}.exe
          retention-days: 1
          compression-level: 9

  release:
    name: Upload to GitHub Release
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Download All Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Prepare Release Assets
        shell: bash
        run: |
          # 创建 release-assets 目录
          mkdir -p release-assets

          # 遍历所有 package-* 目录
          for package_dir in artifacts/package-*; do
            # 跳过不存在的匹配
            [ -d "$package_dir" ] || continue

            # 从目录名提取平台和架构 (格式: package-<platform>-<arch>)
            package_name=$(basename "$package_dir")
            platform_arch="${package_name#package-}"

            # 分割平台和架构 (处理可能的多段架构名，如 "macOS-Intel")
            IFS='-' read -ra parts <<< "$platform_arch"
            platform="${parts[0]}"
            arch="${parts[@]:1}"  # 处理可能有多个连字符的情况

            # 确定源文件路径
            if [ "$platform" = "Windows" ]; then
              # Windows 有额外的 Release 目录
              src_file="$package_dir/Release/DanmakuFactory.exe"
              extension=".exe"
            else
              src_file="$package_dir/DanmakuFactory"
              extension=""
            fi

            # 检查文件是否存在（处理 Windows 的其他可能路径）
            if [ ! -f "$src_file" ] && [ "$platform" = "Windows" ]; then
              src_file="$package_dir/DanmakuFactory.exe"
            fi

            # 跳过不存在的文件
            [ -f "$src_file" ] || {
              echo "⚠️ 跳过: $package_dir (文件不存在)"
              continue
            }

            # 构建目标文件名 (替换空格为连字符，确保文件名合法)
            clean_arch=$(echo "$arch" | tr ' ' '-')
            dest_file="release-assets/DanmakuFactory-dev-${platform}-${clean_arch}-CLI${extension}"

            # 复制并重命名文件
            cp "$src_file" "$dest_file"
            echo "✅ 复制: $src_file → $dest_file"
          done

          # 验证结果
          echo -e "\n生成的发布资产:"
          ls -lh release-assets/

      - name: Update Draft tag
        run: |
          git tag Draft ${{ github.sha }}
          git push origin Draft -f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: Draft
          name: Continuous Draft Build
          body: |
            Automated Draft build from commit ${{ github.sha }}
          prerelease: true
          files: release-assets/*

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
